// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id               String        @id @unique @default(cuid())
  firstName        String
  lastName         String?
  email            String        @unique
  phone            String?
  country          String?
  emailVerified    Boolean
  profile          String?
  addressFirstname String?
  addressLastname  String?
  companyName      String?
  address          String?
  city             String?
  state            String?
  zipcode          String?
  heads            User[]        @relation("UserTeam")
  teamMembers      User[]        @relation("UserTeam")
  credentials      Credentials?
  orders           Order[]
  teamOrders       Order[]       @relation("TeamOrder")
  createdAt        DateTime      @default(now())
  sentMessages     Message[]     @relation("SenderMessage")
  receivedMessages Message[]     @relation("ReceiverMessage")
  invoices         Invoice[]
  Discussions      Discussions[]
  role             role          @default(client)
  privateChats     PrivateChat[] @relation("User1PrivateChat")
  secondaryChats   PrivateChat[] @relation("User2PrivateChat")
}

model Credentials {
  id       String @id @unique @default(cuid())
  userID   String @unique
  password String
  user     User   @relation(fields: [userID], references: [id])
}

model Order {
  id             String        @id @unique @default(cuid())
  name           String
  type           String
  notes          String?       @db.LongText
  attachments    String?
  PaymentStatus  String
  logo           String?
  orderStatus    orderStatus   @default(DRAFT)
  referenceLinks String?
  createdAt      DateTime      @default(now())
  userId         String
  team           User[]        @relation("TeamOrder")
  invoices       Invoice[]
  User           User          @relation(fields: [userId], references: [id])
  discussions    Discussions[]
  deliveries     Delivery[]

  @@index([userId])
}

model Invoice {
  id            String        @id @unique @default(cuid())
  orderId       String
  userId        String
  createdAt     DateTime      @default(now())
  notes         String?
  amount        Int
  paymentId     String?       @unique
  paymentLink   String?       @db.LongText
  pdf           String?
  paymentStatus paymentStatus @default(pending)
  order         Order         @relation(fields: [orderId], references: [id])
  user          User          @relation(fields: [userId], references: [id])
  deliveryTime  Int

  @@index([orderId])
  @@index([userId])
}

model Discussions {
  id          String   @id @unique @default(cuid())
  message     String
  orderId     String
  userId      String
  attachments String?
  createdAt   DateTime @default(now())
  order       Order    @relation(fields: [orderId], references: [id])
  user        User     @relation(fields: [userId], references: [id])

  @@index([orderId])
  @@index([userId])
}

model Delivery {
  id        String   @id @unique @default(cuid())
  orderId   String
  order     Order    @relation(fields: [orderId], references: [id])
  notes     String?
  createdAt DateTime @default(now())

  @@index([orderId])
}

enum orderStatus {
  DRAFT
  pendingReview
  pendingQuote
  pendingpayment
  inProduction
  inRepair
  deliverd
  completed
}

enum paymentStatus {
  pending
  paid
  failed
}

enum role {
  admin
  client
}

model Message {
  id            String      @id @unique @default(cuid())
  message       String
  attachment    String?
  senderId      String
  sender        User        @relation("SenderMessage", fields: [senderId], references: [id])
  receiverId    String
  receiver      User        @relation("ReceiverMessage", fields: [receiverId], references: [id])
  isRead        Boolean     @default(false)
  createdAt     DateTime    @default(now())
  PrivateChat   PrivateChat @relation(fields: [privateChatId], references: [id])
  privateChatId String

  @@index([receiverId])
  @@index([senderId])
  @@index([privateChatId])
}

model PrivateChat {
  id       String    @id @unique @default(cuid())
  user1Id  String
  user2Id  String
  user1    User      @relation("User1PrivateChat", fields: [user1Id], references: [id])
  user2    User      @relation("User2PrivateChat", fields: [user2Id], references: [id])
  messages Message[]

  @@unique([user1Id, user2Id])
  @@index([user2Id])
}
